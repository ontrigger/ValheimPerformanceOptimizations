#include "Includes/OcclusionStructs.cginc"
#include "UnityCG.cginc"
#include "UnityDeferredLibrary.cginc"

//--------------------------------------------------------------------------------------
// Pragmas
//--------------------------------------------------------------------------------------

#pragma kernel CSMain
#pragma enable_d3d11_debug_symbols
//--------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------
#define THREAD_GROUP_SIZE_X 1
#define THREAD_GROUP_SIZE_Y 1
#define THREAD_GROUP_SIZE_Z 1

//--------------------------------------------------------------------------------------
// Constant Buffers
//--------------------------------------------------------------------------------------

cbuffer CB
{
    uint _ShouldOcclusionCull;
    uint _ShouldCullInvisible;
    
    /*int _ShadowCascades;
    float _ShadowDistance;
    float _DetailCullingScreenPercentage;*/
    float2 _HiZTextureSize;
    float3 _CamPosition;
    
    float4x4 _UNITY_MATRIX_MVP;
    Texture2D _HiZMap;
    SamplerState sampler_HiZMap;
};

//--------------------------------------------------------------------------------------
// Structured Buffers
//--------------------------------------------------------------------------------------

StructuredBuffer<InstanceData> _InstanceDataBuffer;
RWStructuredBuffer<uint>       _VisibilityBuffer;
//RWStructuredBuffer<uint> _ArgsBuffer;
//RWStructuredBuffer<uint> _ShadowArgsBuffer;
//RWStructuredBuffer<uint> _ShadowIsVisibleBuffer;
//RWStructuredBuffer<SortingData> _SortingData;

//--------------------------------------------------------------------------------------
// Kernels & Functions
//--------------------------------------------------------------------------------------

inline uint IsCameraOutsideObjBounds(float3 pos, float3 minPos, float3 maxPos)
{
    float boundsSize = distance(maxPos, minPos);
    return ((distance(pos, maxPos) > boundsSize)
            + (distance(pos, minPos) > boundsSize));
}

/*inline uint IsVisibleAfterDetailCulling(float clipMinX, float clipMaxX, float clipMinY, float clipMaxY)
{
    return saturate(
            (distance(clipMinX, clipMaxX) >= _DetailCullingScreenPercentage)
            + (distance(clipMinY, clipMaxY) >= _DetailCullingScreenPercentage)
    );
}*/

// Hi-Z Culling
inline uint IsVisibleAfterOcclusionCulling(InstanceData instance, float clipMinX, float clipMaxX, float clipMinY, float clipMaxY, float clipMinZ)
{
    // Change it to 0 - 1 range 
    float2 minXY = float2(clipMinX, clipMinY) * 0.5 + 0.5;
    float2 maxXY = float2(clipMaxX, clipMaxY) * 0.5 + 0.5;
    
    // Calculate hi-Z buffer mip
    int2 size = (maxXY - minXY) * _HiZTextureSize.xy;
    float mip = ceil(log2(max(size.x, size.y)));
    mip = clamp(mip, 0, 10);
    
    // Texel footprint for the lower (finer-grained) level
    float  level_lower = max(mip - 1, 0);
    float2 scale = exp2(-level_lower);
    float2 a = floor(minXY * scale);
    float2 b = ceil(maxXY * scale);
    float2 dims = b - a;
    
    // Use the lower level if we only touch <= 2 texels in both dimensions
    if (dims.x <= 2 && dims.y <= 2)
    {
        mip = level_lower;
    }

	float4 boxUVs = float4(minXY, maxXY);
	float4 depth = float4(
		_HiZMap.SampleLevel(sampler_HiZMap, boxUVs.xy, mip).r,
		_HiZMap.SampleLevel(sampler_HiZMap, boxUVs.zy, mip).r,
		_HiZMap.SampleLevel(sampler_HiZMap, boxUVs.xw, mip).r,
		_HiZMap.SampleLevel(sampler_HiZMap, boxUVs.zw, mip).r
	);

	float maxDepth = min(min(depth.x, depth.y), min(depth.z, depth.w));
    
    /*
    // find the max depth
    // Hi-Z approach that allows for more samples.
    // https://www.gamedev.net/blogs/entry/2249535-hierarchical-z-buffer-occlusion-culling-updated-07152011/
    //const   int numSamples = 24;
    const   int   xSamples = 8; // numSamples + 1;
    const   int   ySamples = 25; // numSamples + 1;
    const  float    widthSS = (maxXY.x - minXY.x);
    const  float   heightSS = (maxXY.y - minXY.y);    
    const  float  maxSizeSS = max(widthSS * _HiZTextureSize.x, heightSS * _HiZTextureSize.y);    
    const  float      stepX = widthSS / xSamples;    
    const  float      stepY = heightSS / ySamples;
    
    float HIZdepth = 1;    
    float yPos = minXY.y;
    for(int y = 0; y < ySamples; ++y)
    {
        float xPos = minXY.x;
        for(int x = 0; x < xSamples; ++x)
        {
            const float2 nCoords0 = float2(xPos, yPos);
            HIZdepth = min(HIZdepth, _HiZMap.SampleLevel(sampler_HiZMap, nCoords0, mip).r);
            xPos += stepX;
        }
        yPos += stepY;    
    }*/
    
    return (1.0 - clipMinZ) >= maxDepth - 0.000015; // last is an epsilon
}

inline uint IsVisibleAfterFrustumCulling(float4 clipPos)
{
    return (clipPos.z > clipPos.w 
            || clipPos.x < -clipPos.w 
            || clipPos.x > clipPos.w 
            || clipPos.y < -clipPos.w 
            || clipPos.y > clipPos.w) 
            ? 0 : 1;
}

//--------------------------------------------------------------------------------------
// Kernels
//--------------------------------------------------------------------------------------
float LOD00_RANGE = 15;
float LOD01_RANGE = 50;

int _Count;
[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, THREAD_GROUP_SIZE_Z)]
inline void CSMain (
        in uint3 _dispatchThreadID : SV_DispatchThreadID, // DispatchThreadID  = dot(GroupID, numthreads) + GroupThreadId;
        in uint  _groupIndex       : SV_GroupIndex, // uint GroupIndex = unique index of a thread inside a group
        in uint3 _groupID          : SV_GroupID, // GroupID = index for each dimension inside a ThreadGroupCount 
        in uint3 _groupThreadID    : SV_GroupThreadID // uint3 GroupThreadId = indices for each dimension inside a group of the current thread
    )
{
    // Calculate the instance index
    uint tID = _dispatchThreadID.x;
    if (tID >= (uint)_Count)
    {
        return;
    }

	if (_ShouldCullInvisible + _VisibilityBuffer[tID] < 1)
	{
		return;
	}

    // Get the instance data
    InstanceData instance = _InstanceDataBuffer[tID];

    // Check if the instance is visible
    float3 minPos = instance.boundsCenter - instance.boundsExtents;
    float3 maxPos = instance.boundsCenter + instance.boundsExtents;

    float4 boxCorners[8];
    boxCorners[0] = float4(minPos.x, minPos.y, minPos.z, 1.0);
    boxCorners[1] = float4(minPos.x, minPos.y, maxPos.z, 1.0);
    boxCorners[2] = float4(minPos.x, maxPos.y, minPos.z, 1.0);
    boxCorners[3] = float4(minPos.x, maxPos.y, maxPos.z, 1.0);
    boxCorners[4] = float4(maxPos.x, minPos.y, minPos.z, 1.0);
    boxCorners[5] = float4(maxPos.x, minPos.y, maxPos.z, 1.0);
    boxCorners[6] = float4(maxPos.x, maxPos.y, minPos.z, 1.0);
    boxCorners[7] = float4(maxPos.x, maxPos.y, maxPos.z, 1.0);

    float4 clipPos = mul(_UNITY_MATRIX_MVP, boxCorners[0]);
    uint isInFrustum = IsVisibleAfterFrustumCulling(clipPos);

    clipPos.xyz = clipPos.xyz / clipPos.w;
    float clipMinX = clipPos.x;
    float clipMaxX = clipPos.x;
    float clipMinY = clipPos.y;
    float clipMaxY = clipPos.y;
    float clipMinZ = clipPos.z;

	float clipMinXY = float2(1.0, 1.0);
	float clipMaxXY = float2(0.0, 0.0);

    //float minDistanceToCamera = distance(instance.boundsCenter.xyz, _CamPosition.xyz);
    [unroll]
    for (int i = 1; i < 8; i++)
    {
        clipPos = mul(_UNITY_MATRIX_MVP, boxCorners[i]);

        // For Frustum
        isInFrustum = saturate(isInFrustum + IsVisibleAfterFrustumCulling(clipPos));

        // For HiZ
        clipPos.xyz = clipPos.xyz / clipPos.w;
        clipMinX = min(clipPos.x, clipMinX);
        clipMaxX = max(clipPos.x, clipMaxX);
        clipMinY = min(clipPos.y, clipMinY);
        clipMaxY = max(clipPos.y, clipMaxY);
        clipMinZ = min(clipPos.z, clipMinZ);

    	clipMinXY = min(clipPos.xy, clipMinXY);
    	clipMinXY = min(clipPos.xy, clipMinXY);
    }

	clipMinZ = saturate(clipMinZ);

    // We only cull instances where the camera doesn't intersect the instance 
    // bounds. If the camera is inside the bounds we want to render the object
    uint isVisible = 1;
    if (IsCameraOutsideObjBounds(_CamPosition, minPos, maxPos))
    {
        // Do we pass the frustum culling...?
        isVisible *= isInFrustum;

        // Do we pass the occlusion culling...?
        isVisible *= (_ShouldOcclusionCull * isVisible > 0) ? IsVisibleAfterOcclusionCulling(instance, clipMinX, clipMaxX, clipMinY, clipMaxY, clipMinZ) : 1;
    }

    // Output
    _VisibilityBuffer[tID] = isVisible;
    //InterlockedAdd(_ArgsBuffer[argsIndex], isVisible);

    //_ShadowIsVisibleBuffer[tID] = isCastingShadow;
    //InterlockedAdd(_ShadowArgsBuffer[shadowArgsIndex], isCastingShadow);

    //sortingData.distanceToCam = minDistanceToCamera;
    //_SortingData[tID] = sortingData;
}